// import React, { useState } from 'react'
// import { Avatar, Breadcrumb, Button, Dropdown, Layout, Menu } from 'antd'
// import { getMenuItems, MenuItem } from 'menu'
// import { navigate } from 'router'
// import { useLocation } from 'react-router'
// import { DownOutlined, MenuFoldOutlined, MenuUnfoldOutlined, SettingOutlined, UserOutlined } from '@ant-design/icons'
// import AppStore from 'AppStore'
// import { __, T } from 'config/i18n'
// import { getRoutesMap, routes } from 'routes'
// import { getUserRole, isUserConfirmed } from 'helpers/permission'
//
// const { Header } = Layout
//
// const renderMenuItem = (item: MenuItem) => {
//   if (item.submenu) {
//     return (
//       <Menu.SubMenu
//         key={item.label}
//         title={
//           <span>
//             <span>{item.label}</span>
//           </span>
//         }
//       >
//         {item.submenu.map(renderMenuItem)}
//       </Menu.SubMenu>
//     )
//   }
//
//   return (
//     <Menu.Item key={item.routePath ?? item.label} onClick={item.onClick ?? (() => navigate(item.routePath!))}>
//         { item.icon !== 'icon' &&
//         <img
//             src={item.icon}
//             style={{ width: '20px', height: '20px', marginRight: '4px', marginBottom: '4px' }}
//         />
//         }
//         {
//             item.icon === 'icon' && <SettingOutlined style={{ color: '#CEFF00' }} />
//         }
//     </Menu.Item>
//   )
// }
//
// interface Props {
//   children
//   hideTopBar?: boolean
//   hideSideBar?: boolean
//   hideCrumbs?: boolean
//   fullScreen?: boolean
//   style?: any
// }
//
// /** Determines if a menu item has some active children */
// const menuIsActive = (menu: MenuItem[], activePaths: string[]): boolean => {
//   return activePaths.some(path =>
//     menu.some(({ routePath, submenu }) => path === routePath || (submenu && menuIsActive(submenu, [path])))
//   )
// }
//
// const SidebarLayout: React.FC<Props> = ({ children, hideTopBar, hideSideBar, hideCrumbs, fullScreen, style }) => {
//   const { pathname } = useLocation()
//   const selectedKeys = [pathname]
//   const [, setCollapsed] = useState(AppStore.collapsedBarMenu)
//   const defaultOpenKeys = getMenuItems()
//     .filter(({ submenu }) => submenu && !AppStore.collapsedBarMenu && menuIsActive(submenu, selectedKeys))
//     .map(({ label }) => label)
//
//   const toggleCollapsedButton = async () => {
//     const newCollapsed = !AppStore.collapsedBarMenu
//     await AppStore.setCollapsedMenuBar(newCollapsed)
//     setCollapsed(newCollapsed)
//   }
//   const renderCollapsedButton = (collapsed?: boolean) =>
//     AppStore.collapsedBarMenu ? (
//       <MenuUnfoldOutlined onClick={toggleCollapsedButton} />
//     ) : (
//       <MenuFoldOutlined onClick={toggleCollapsedButton} />
//     )
//
//   const crumbs = Object.entries(getRoutesMap())
//     // Get all routes that contain the current one.
//     .filter(([key, value]) => pathname.includes(key) && value.breadcrumbName)
//     .map(([key, value]) => ({
//       path: key,
//       breadcrumbName: value.breadcrumbName,
//     })) as { path: routes; breadcrumbName: string }[]
//   if (fullScreen)
//     return (
//       <View style={{ minHeight: '100vh', display: 'flex' }}>
//         {children} {}
//       </View>
//     )
//
//   const logout = async () => {
//     await AppStore.setGoToDashboard(true)
//     AppStore.keyCloak?.logout()
//   }
//
//   const dropdownMenu = (
//     <Menu>
//       <Menu.Item disabled>
//         {__(T.misc.role)}: {getUserRole()}
//       </Menu.Item>
//       <Menu.Item
//         onClick={async () => {
//           await AppStore.setLanguage('it')
//           window.location.reload(false)
//         }}
//       >
//         Italiano
//       </Menu.Item>
//       <Menu.Item
//         onClick={async () => {
//           await AppStore.setLanguage('en')
//           window.location.reload(false)
//         }}
//       >
//         English
//       </Menu.Item>
//       <Menu.Item danger onClick={logout}>
//         {__(T.buttons.logout)}
//       </Menu.Item>
//     </Menu>
//   )
//
//   return (
//     <Layout style={{ height: '100vh', ...style }}>
//       {!hideSideBar && (
//         <Layout.Sider width={'auto'} collapsedWidth={'auto'} collapsed={AppStore.collapsedBarMenu}>
//           {!AppStore.collapsedBarMenu && (
//             <img
//                 src={AppStore.getImage(AppStore.appSettings.bigLogo)}
//               alt={__(T.misc.logo)}
//               style={{ width: '135px', height: 'auto', marginBottom: 25, marginTop: 21, marginLeft: 16 }}
//               onClick={() => navigate('/')}
//             />
//           )}
//           {AppStore.collapsedBarMenu && (
//             <img
//                 src={AppStore.getImage(AppStore.appSettings.smallLogo)}
//               alt={__(T.misc.logo)}
//               style={{ width: '31px', height: 'auto', marginBottom: 25, marginTop: 21, marginLeft: 24 }}
//               onClick={() => navigate('/')}
//             />
//           )}
//           <Menu theme="dark" mode="inline" selectedKeys={selectedKeys} defaultOpenKeys={defaultOpenKeys}>
//             {getMenuItems().map(renderMenuItem)}
//           </Menu>
//         </Layout.Sider>
//       )}
//
//       <Layout className="site-layout">
//         {!hideTopBar && (
//           <Header
//             style={{
//               backgroundColor: '#FFFFFF',
//               display: 'inline-flex',
//               alignItems: 'center',
//               paddingLeft: 20,
//               paddingRight: 20,
//             }}
//           >
//             <View>{renderCollapsedButton(AppStore.collapsedBarMenu)}</View>
//             {(isUserConfirmed() || getUserRole() === 'admin') && (
//               <Text h2 style={{ paddingTop: 12, marginLeft: 20 }}>
//                   {AppStore.appSettings.headerTitle}
//               </Text>
//             )}
//             {!isUserConfirmed() && getUserRole() !== 'admin' && (
//               <Text h2 style={{ paddingTop: 12, marginLeft: 20 }}>
//                 {__(T.messages.profile_in_revision)}
//               </Text>
//             )}
//             <View style={{ display: 'flex', flex: 1, justifyContent: 'flex-end', alignItems: 'center' }}>
//               {getUserRole() === 'admin' && (
//                 <SettingOutlined onClick={() => navigate('/admin/settings')} style={{ fontSize: 30 }} />
//               )}
//               {/* <QuestionCircleOutlined onClick={() => window.open('https://www.temera.it/it/solutions', '_blank')} /> */}
//               <Avatar
//                 style={{ color: '#f56a00', backgroundColor: '#fde3cf', marginLeft: 25, marginRight: 5 }}
//                 icon={<UserOutlined />}
//               />
//               <Dropdown overlay={dropdownMenu}>
//                 <span className="ant-dropdown-link" style={{ marginLeft: 8 }} onClick={e => e.preventDefault()}>
//                   {AppStore.loggedUser?.userName} <DownOutlined />
//                 </span>
//               </Dropdown>
//             </View>
//           </Header>
//         )}
//         {crumbs.length > 1 && !hideCrumbs && (
//           <Breadcrumb style={{ marginLeft: 10, marginTop: 10 }}>
//             {crumbs.map(crumb => (
//               <Breadcrumb.Item key={crumb.path}>
//                 <Button type="link" onClick={() => navigate(crumb.path)}>
//                   {crumb.breadcrumbName}
//                 </Button>
//               </Breadcrumb.Item>
//             ))}
//           </Breadcrumb>
//         )}
//         <Layout.Content>{children}</Layout.Content>
//       </Layout>
//     </Layout>
//   )
// }
//
// export default SidebarLayout
